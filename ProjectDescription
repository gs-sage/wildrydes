The project focused on the open repo of wildrydes-sites and used multiple AWS services shown in the AppArchitecture.png file in this repo.
The link to the original repo is at https://github.com/CodyAshby222/wildrydes-site
The link to the tutorial can be found at https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/
In this project I used the following concepts of AWS to create a serverless web app.
  
Serverless Backend
  Utilized AWS Lambda for serverless computing, allowing for scalable and cost-efficient execution of backend logic.
  Leveraged AWS API Gateway to create RESTful APIs, enabling communication between frontend and backend components.

User Authentication and Authorization
  Implemented user authentication using AWS Cognito, providing secure user sign-up, sign-in, and access control functionality.
  Leveraged Cognito User Pools to manage user identities, while Cognito Identity Pools enabled integration with other AWS services.

Real-time Data Storage
  Utilized Amazon DynamoDB, a fully managed NoSQL database, to store and retrieve real-time data, such as user information and ride details.
  Designed efficient table structures and indexes to support fast and scalable data access.

File Storage and Hosting
  Leveraged Amazon S3 (Simple Storage Service) to store user-uploaded images and other files securely.
  Utilized S3 static website hosting to serve static web content, such as HTML, CSS, and JavaScript files.

Serverless Image Processing
  Integrated with AWS Lambda and Amazon S3 events to automatically trigger image processing logic upon file uploads.
  Utilized AWS Rekognition for image analysis, enabling features like face detection and moderation.

API Logging and Monitoring
  Employed Amazon CloudWatch to capture and analyze logs generated by AWS Lambda functions and API Gateway.
  Configured CloudWatch Alarms to trigger notifications and take automated actions based on defined metrics thresholds.

Infrastructure as Code
  Used AWS CloudFormation to define and provision the required AWS resources in a repeatable and consistent manner.
  Wrote CloudFormation templates in YAML/JSON to declare the infrastructure and its configuration.
